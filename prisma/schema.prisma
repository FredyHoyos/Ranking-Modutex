// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Enum para controlar roles
enum Role {
  ADMIN
  USER
}

// Tabla de usuarios
model User {
  id        Int       @id @default(autoincrement())
  name      String
  username  String    @unique
  password  String
  role      Role      @default(USER) // ðŸ‘ˆ Operarios = USER, Admin = ADMIN
  createdAt DateTime  @default(now())

  // RelaciÃ³n 1-1 con Operario (solo si el usuario es un operario)
  operario  Operario?
}

// Datos especÃ­ficos de operarios
model Operario {
  id         Int      @id @default(autoincrement())
  numeroId   String   @unique
  porcentaje Int      @default(0) // 0 - 100
  createdAt  DateTime @default(now())

  // RelaciÃ³n con User
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
}

model Referencia {
  id          Int      @id @default(autoincrement())
  referencia  Int
  op          Int
  operaciones Operacion[]
  tiempo      Float  @default(0.0)
  createdAt   DateTime @default(now())
  mostrar     Boolean  @default(true)
}

model Operacion {
  id           Int        @id @default(autoincrement())
  nombre       String
  tiempo       Float
  precio       Float  @default(0.0)
  maquina      String
  referenciaId Int
  referencia   Referencia @relation(fields: [referenciaId], references: [id], onDelete: Cascade)
}
